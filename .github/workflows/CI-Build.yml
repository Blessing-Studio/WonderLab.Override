name: CI-Build
on:
  push:
    branches: ["master"]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Test
      run: dotnet test wonderlab/wonderlab.csproj

  build_Windows:
    strategy:
      matrix:
        arch: ["x64", "x86", "arm64"]
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj --configuration Release -t:CreateZip --arch ${{ matrix.arch }} --os win
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: wonderlab/bin/Release/net7.0/win-${{ matrix.arch }}/*.zip
  build_Linux:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"]
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj --configuration Release -t:CreateZip --arch ${{ matrix.arch }} --os linux
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux
        path: wonderlab/bin/Release/net7.0/linux-${{ matrix.arch }}/*.zip
  build_MacOS:
    strategy:
      matrix:
        arch: ["x64", "arm64"]
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj --configuration Release -t:CreateZip --arch ${{ matrix.arch }} --os osx
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MacOS
        path: wonderlab/bin/Release/net7.0/osx-${{ matrix.arch }}/*.zip
  build_Linux_Deb:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"]
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj --configuration Release -t:CreateDeb --arch ${{ matrix.arch }} --os linux
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Deb
        path: wonderlab/bin/Release/net7.0/linux-${{ matrix.arch }}/*.deb
  build_Linux_Rpm:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"]
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj --configuration Release -t:CreateRpm --arch ${{ matrix.arch }} --os linux
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Rpm
        path: wonderlab/bin/Release/net7.0/linux-${{ matrix.arch }}/*.rpm
  Release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [build_Windows, build_MacOS, build_Linux_Deb, build_Linux_Rpm, build_Linux]
    steps:
    - name: Download Windows Build
      uses: actions/download-artifact@v3
      with:
       name: Windows
    - name: Download Linux Build
      uses: actions/download-artifact@v3
      with:
       name: Linux
    - name: Download Deb Build
      uses: actions/download-artifact@v3
      with:
       name: Linux_Deb
    - name: Download Rpm Build
      uses: actions/download-artifact@v3
      with:
        name: Linux_Rpm
    - name: Download MacOS Build
      uses: actions/download-artifact@v3
      with:
       name: MacOS
    - name: Create Release
      if: github.event_name != 'pull_request' 
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: AutoBuild
        title: "自动构建版本"
        files: |
            *.zip
            *.deb
            *.rpm
