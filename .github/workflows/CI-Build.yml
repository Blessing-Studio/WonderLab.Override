name: CI-Build
on:
  workflow_dispatch:
  push:
    branches: [ "feature" ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  dotnet-version: "8.0"
  target-version: "net8.0"
  compile-flags: "--self-contained=true -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:DebugType=None -p:DebugSymbols=false -p:PublishSingleFile=true"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Test
      run: dotnet test WonderLab.Desktop/WonderLab.Desktop.csproj
  test_build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Test
      run: dotnet build WonderLab.Desktop/WonderLab.Desktop.csproj
  build_Windows:
    strategy:
      matrix:
        arch: ["x64", "arm64"] #We won't support x86 anymore
    runs-on: windows-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      run: dotnet build WonderLab.Desktop/WonderLab.Desktop.csproj -t:CreateZip --arch ${{ matrix.arch }} --os win ${{ env.compile-flags }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: WonderLab.Desktop/bin/Release/${{ env.target-version }}/win-${{ matrix.arch }}/*.zip
  build_Windows_Installer:
    strategy:
      matrix:
        arch: ["x64", "arm64"] #We won't support x86 anymore
    runs-on: windows-latest
    needs: [test, test_build, build_Windows]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install InnoSetup
      uses: ConorMacBride/install-package@v1
      with:
        choco: innosetup
    - name: Install pupnet
      run: dotnet tool install -g KuiperZone.PupNet
    - name: Get version
      id: package_version
      uses: Blessing-Studio/get-csproj-version@main
      with:
        file: WonderLab.Desktop/WonderLab.Desktop.csproj
    - name: Build
      run: pupnet -r win-${{ matrix.arch }} -k setup -y -o WonderLab.${{ steps.package_version.outputs.version }}.win-${{ matrix.arch }}.installer.exe
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: WindowsInstaller
        path: Deploy/OUT/*.exe
  build_Linux_Appimage:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"] #"bionic-arm64", "musl-x64" is not available
    runs-on: ubuntu-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install pupnet
      run: dotnet tool install -g KuiperZone.PupNet
    - name: Install Linrary
      run: |
          sudo add-apt-repository universe
          sudo apt install libfuse2
    - name: Get version
      id: package_version
      uses: Blessing-Studio/get-csproj-version@main
      with:
        file: WonderLab.Desktop/WonderLab.Desktop.csproj
    - name: Build
      run: pupnet --runtime linux-${{ matrix.arch }} --kind appimage -y -o WonderLab.${{ steps.package_version.outputs.version }}.linux-${{ matrix.arch }}.AppImage
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: AppImage
        path: Deploy/OUT/*.AppImage
  build_MacOS:
    strategy:
      matrix:
        arch: ["x64", "arm64"]
    runs-on: macos-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      run: dotnet build WonderLab.Desktop/WonderLab.Desktop.csproj -t:CreateZip --arch ${{ matrix.arch }} --os osx ${{ env.compile-flags }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MacOS
        path: WonderLab.Desktop/bin/Release/${{ env.target-version }}/osx-${{ matrix.arch }}/*.zip
  build_Linux_Deb:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"]
    runs-on: ubuntu-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      run: dotnet build WonderLab.Desktop/WonderLab.Desktop.csproj -t:CreateDeb --arch ${{ matrix.arch }} --os linux ${{ env.compile-flags }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Deb
        path: WonderLab.Desktop/bin/Release/${{ env.target-version }}/linux-${{ matrix.arch }}/*.deb
  build_Linux_Rpm:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"]
    runs-on: ubuntu-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Build
      run: dotnet build WonderLab.Desktop/WonderLab.Desktop.csproj -t:CreateRpm --arch ${{ matrix.arch }} --os linux ${{ env.compile-flags }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Linux_Rpm
        path: WonderLab.Desktop/bin/Release/${{ env.target-version }}/linux-${{ matrix.arch }}/*.rpm
  build_MacOS_App:
    strategy:
      matrix:
        arch: ["x64", "arm64"]
    runs-on: ubuntu-latest
    needs: [test, test_build, build_MacOS]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Dotnet"
      uses: "actions/setup-dotnet@v3"
      with:
        dotnet-version: "${{env.dotnet-version}}"
    - name: Checkout BlessingStudio.Warp repo
      uses: actions/checkout@v3
      with:
        repository: Blessing-Studio/BlessingStudio.Wrap
        path: refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout NatTypeTester repo
      uses: actions/checkout@v3
      with:
        repository: HMBSbige/NatTypeTester
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout ConsoleInteractive repo
      uses: actions/checkout@v3
      with:
        repository: breadbyte/ConsoleInteractive
        path: refs/BlessingStudio.Warp/refs
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Get version
      id: package_version
      uses: Blessing-Studio/get-csproj-version@main
      with:
        file: WonderLab.Desktop/WonderLab.Desktop.csproj
    - name: Build
      run: dotnet publish WonderLab.Desktop/WonderLab.Desktop.csproj --arch ${{ matrix.arch }} --os osx  -t:BundleApp ${{ env.compile-flags }}
    - name: Create Windows ZIP
      uses: thedoctor0/zip-release@0.7.1
      with:
         directory: 'WonderLab.Desktop/bin/Release/${{ env.target-version }}/osx-${{ matrix.arch }}/publish/'
         type: 'zip'
         filename: 'WonderLab.Desktop.${{ steps.package_version.outputs.version }}.osx.app-${{ matrix.arch }}.zip'
         path: 'WonderLab.Desktop.app'
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MacOS
        path: 'WonderLab.Desktop/bin/Release/${{ env.target-version }}/osx-${{ matrix.arch }}/publish/*.zip'
  Release:
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      GITHUB_REF: $ github.ref
    needs: [build_Linux_Deb, build_Linux_Rpm, build_MacOS_App, build_Windows_Installer, build_Linux_Appimage]
    steps:
    - uses: nelonoel/branch-name@v1
    - name: Download Windows Build
      uses: actions/download-artifact@v3
      with:
       name: Windows
    - name: Download Windows Installer Build
      uses: actions/download-artifact@v3
      with:
       name: WindowsInstaller
    #- name: Download Linux Build
    #  uses: actions/download-artifact@v3
    #  with:
    #   name: Linux
    - name: Download AppImage Build
      uses: actions/download-artifact@v3
      with:
       name: AppImage
    - name: Download Deb Build
      uses: actions/download-artifact@v3
      with:
       name: Linux_Deb
    - name: Download Rpm Build
      uses: actions/download-artifact@v3
      with:
        name: Linux_Rpm
    - name: Download MacOS Build
      uses: actions/download-artifact@v3
      with:
       name: MacOS
    - name: Create Release
      if: github.event_name != 'pull_request' 
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: AutoBuild_${{ env.BRANCH_NAME }}
        title: "${{ env.BRANCH_NAME }} 分支 - 测试渠道"
        files: |
            *.exe
            *.zip
            *.deb
            *.rpm
            *.AppImage
  Delete_Artifacts:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [Release]
    steps:
    - name: Delete Windows Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: Windows
    #- name: Delete Linux Artifact
    #  uses: geekyeggo/delete-artifact@v2
    #  with:
    #      name: Linux
    - name: Delete Deb Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: Linux_Deb
    - name: Delete Rpm Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: Linux_Rpm
    - name: Delete MacOS Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: MacOS
    - name: Delete WindowsInstaller Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: WindowsInstaller
    - name: Delete AppImage Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: AppImage
